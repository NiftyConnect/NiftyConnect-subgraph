// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OrderApprovedPartOne extends ethereum.Event {
  get params(): OrderApprovedPartOne__Params {
    return new OrderApprovedPartOne__Params(this);
  }
}

export class OrderApprovedPartOne__Params {
  _event: OrderApprovedPartOne;

  constructor(event: OrderApprovedPartOne) {
    this._event = event;
  }

  get hash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get exchange(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get maker(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get taker(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get makerRelayerFeeRecipient(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get side(): i32 {
    return this._event.parameters[5].value.toI32();
  }

  get saleKind(): i32 {
    return this._event.parameters[6].value.toI32();
  }

  get nftAddress(): Address {
    return this._event.parameters[7].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get ipfsHash(): Bytes {
    return this._event.parameters[9].value.toBytes();
  }
}

export class OrderApprovedPartTwo extends ethereum.Event {
  get params(): OrderApprovedPartTwo__Params {
    return new OrderApprovedPartTwo__Params(this);
  }
}

export class OrderApprovedPartTwo__Params {
  _event: OrderApprovedPartTwo;

  constructor(event: OrderApprovedPartTwo) {
    this._event = event;
  }

  get hash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get calldata(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get replacementPattern(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get staticTarget(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get staticExtradata(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get paymentToken(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get basePrice(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get extra(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get listingTime(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get expirationTime(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }

  get salt(): BigInt {
    return this._event.parameters[10].value.toBigInt();
  }
}

export class OrderCancelled extends ethereum.Event {
  get params(): OrderCancelled__Params {
    return new OrderCancelled__Params(this);
  }
}

export class OrderCancelled__Params {
  _event: OrderCancelled;

  constructor(event: OrderCancelled) {
    this._event = event;
  }

  get hash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class OrdersMatched extends ethereum.Event {
  get params(): OrdersMatched__Params {
    return new OrdersMatched__Params(this);
  }
}

export class OrdersMatched__Params {
  _event: OrdersMatched;

  constructor(event: OrdersMatched) {
    this._event = event;
  }

  get buyHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get sellHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get maker(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get taker(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get metadata(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }
}

export class NonceIncremented extends ethereum.Event {
  get params(): NonceIncremented__Params {
    return new NonceIncremented__Params(this);
  }
}

export class NonceIncremented__Params {
  _event: NonceIncremented;

  constructor(event: NonceIncremented) {
    this._event = event;
  }

  get maker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newNonce(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipRenounced extends ethereum.Event {
  get params(): OwnershipRenounced__Params {
    return new OwnershipRenounced__Params(this);
  }
}

export class OwnershipRenounced__Params {
  _event: OwnershipRenounced;

  constructor(event: OwnershipRenounced) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NiftyConnectExchange__splitToMerkleRootAndProofResult {
  value0: Bytes;
  value1: Array<Bytes>;

  constructor(value0: Bytes, value1: Array<Bytes>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytesArray(this.value1));
    return map;
  }
}

export class NiftyConnectExchange extends ethereum.SmartContract {
  static bind(address: Address): NiftyConnectExchange {
    return new NiftyConnectExchange("NiftyConnectExchange", address);
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenTransferProxy(): Address {
    let result = super.call(
      "tokenTransferProxy",
      "tokenTransferProxy():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_tokenTransferProxy(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenTransferProxy",
      "tokenTransferProxy():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  exchangeFeeRate(): BigInt {
    let result = super.call(
      "exchangeFeeRate",
      "exchangeFeeRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_exchangeFeeRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "exchangeFeeRate",
      "exchangeFeeRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  staticCall(target: Address, calldata: Bytes, extradata: Bytes): boolean {
    let result = super.call(
      "staticCall",
      "staticCall(address,bytes,bytes):(bool)",
      [
        ethereum.Value.fromAddress(target),
        ethereum.Value.fromBytes(calldata),
        ethereum.Value.fromBytes(extradata)
      ]
    );

    return result[0].toBoolean();
  }

  try_staticCall(
    target: Address,
    calldata: Bytes,
    extradata: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "staticCall",
      "staticCall(address,bytes,bytes):(bool)",
      [
        ethereum.Value.fromAddress(target),
        ethereum.Value.fromBytes(calldata),
        ethereum.Value.fromBytes(extradata)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  royaltyRegisterHub(): Address {
    let result = super.call(
      "royaltyRegisterHub",
      "royaltyRegisterHub():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_royaltyRegisterHub(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "royaltyRegisterHub",
      "royaltyRegisterHub():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  takerRelayerFeeShare(): BigInt {
    let result = super.call(
      "takerRelayerFeeShare",
      "takerRelayerFeeShare():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_takerRelayerFeeShare(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "takerRelayerFeeShare",
      "takerRelayerFeeShare():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  version(): string {
    let result = super.call("version", "version():(string)", []);

    return result[0].toString();
  }

  try_version(): ethereum.CallResult<string> {
    let result = super.tryCall("version", "version():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  protocolFeeRecipient(): Address {
    let result = super.call(
      "protocolFeeRecipient",
      "protocolFeeRecipient():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_protocolFeeRecipient(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "protocolFeeRecipient",
      "protocolFeeRecipient():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  registry(): Address {
    let result = super.call("registry", "registry():(address)", []);

    return result[0].toAddress();
  }

  try_registry(): ethereum.CallResult<Address> {
    let result = super.tryCall("registry", "registry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  nonces(param0: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_nonces(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cancelledOrFinalized(param0: Bytes): boolean {
    let result = super.call(
      "cancelledOrFinalized",
      "cancelledOrFinalized(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toBoolean();
  }

  try_cancelledOrFinalized(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "cancelledOrFinalized",
      "cancelledOrFinalized(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  protocolFeeShare(): BigInt {
    let result = super.call(
      "protocolFeeShare",
      "protocolFeeShare():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_protocolFeeShare(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "protocolFeeShare",
      "protocolFeeShare():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _deriveDomainSeparator(): Bytes {
    let result = super.call(
      "_deriveDomainSeparator",
      "_deriveDomainSeparator():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try__deriveDomainSeparator(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "_deriveDomainSeparator",
      "_deriveDomainSeparator():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  INVERSE_BASIS_POINT(): BigInt {
    let result = super.call(
      "INVERSE_BASIS_POINT",
      "INVERSE_BASIS_POINT():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_INVERSE_BASIS_POINT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "INVERSE_BASIS_POINT",
      "INVERSE_BASIS_POINT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approvedOrders(hash: Bytes): boolean {
    let result = super.call(
      "approvedOrders",
      "approvedOrders(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(hash)]
    );

    return result[0].toBoolean();
  }

  try_approvedOrders(hash: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "approvedOrders",
      "approvedOrders(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(hash)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  makerRelayerFeeShare(): BigInt {
    let result = super.call(
      "makerRelayerFeeShare",
      "makerRelayerFeeShare():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_makerRelayerFeeShare(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "makerRelayerFeeShare",
      "makerRelayerFeeShare():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  merkleValidatorContract(): Address {
    let result = super.call(
      "merkleValidatorContract",
      "merkleValidatorContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_merkleValidatorContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "merkleValidatorContract",
      "merkleValidatorContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  splitToMerkleRootAndProof(
    merkleData: Array<Bytes>
  ): NiftyConnectExchange__splitToMerkleRootAndProofResult {
    let result = super.call(
      "splitToMerkleRootAndProof",
      "splitToMerkleRootAndProof(bytes32[]):(bytes32,bytes32[])",
      [ethereum.Value.fromFixedBytesArray(merkleData)]
    );

    return new NiftyConnectExchange__splitToMerkleRootAndProofResult(
      result[0].toBytes(),
      result[1].toBytesArray()
    );
  }

  try_splitToMerkleRootAndProof(
    merkleData: Array<Bytes>
  ): ethereum.CallResult<
    NiftyConnectExchange__splitToMerkleRootAndProofResult
  > {
    let result = super.tryCall(
      "splitToMerkleRootAndProof",
      "splitToMerkleRootAndProof(bytes32[]):(bytes32,bytes32[])",
      [ethereum.Value.fromFixedBytesArray(merkleData)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NiftyConnectExchange__splitToMerkleRootAndProofResult(
        value[0].toBytes(),
        value[1].toBytesArray()
      )
    );
  }

  buildCallData(
    selector: BigInt,
    from: Address,
    to: Address,
    nftAddress: Address,
    tokenId: BigInt,
    amount: BigInt,
    merkleRoot: Bytes,
    merkleProof: Array<Bytes>
  ): Bytes {
    let result = super.call(
      "buildCallData",
      "buildCallData(uint256,address,address,address,uint256,uint256,bytes32,bytes32[]):(bytes)",
      [
        ethereum.Value.fromUnsignedBigInt(selector),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromFixedBytes(merkleRoot),
        ethereum.Value.fromFixedBytesArray(merkleProof)
      ]
    );

    return result[0].toBytes();
  }

  try_buildCallData(
    selector: BigInt,
    from: Address,
    to: Address,
    nftAddress: Address,
    tokenId: BigInt,
    amount: BigInt,
    merkleRoot: Bytes,
    merkleProof: Array<Bytes>
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "buildCallData",
      "buildCallData(uint256,address,address,address,uint256,uint256,bytes32,bytes32[]):(bytes)",
      [
        ethereum.Value.fromUnsignedBigInt(selector),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromFixedBytes(merkleRoot),
        ethereum.Value.fromFixedBytesArray(merkleProof)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  guardedArrayReplace(array: Bytes, desired: Bytes, mask: Bytes): Bytes {
    let result = super.call(
      "guardedArrayReplace",
      "guardedArrayReplace(bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromBytes(array),
        ethereum.Value.fromBytes(desired),
        ethereum.Value.fromBytes(mask)
      ]
    );

    return result[0].toBytes();
  }

  try_guardedArrayReplace(
    array: Bytes,
    desired: Bytes,
    mask: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "guardedArrayReplace",
      "guardedArrayReplace(bytes,bytes,bytes):(bytes)",
      [
        ethereum.Value.fromBytes(array),
        ethereum.Value.fromBytes(desired),
        ethereum.Value.fromBytes(mask)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  calculateFinalPrice(
    side: i32,
    saleKind: i32,
    basePrice: BigInt,
    extra: BigInt,
    listingTime: BigInt,
    expirationTime: BigInt
  ): BigInt {
    let result = super.call(
      "calculateFinalPrice",
      "calculateFinalPrice(uint8,uint8,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(side)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(saleKind)),
        ethereum.Value.fromUnsignedBigInt(basePrice),
        ethereum.Value.fromUnsignedBigInt(extra),
        ethereum.Value.fromUnsignedBigInt(listingTime),
        ethereum.Value.fromUnsignedBigInt(expirationTime)
      ]
    );

    return result[0].toBigInt();
  }

  try_calculateFinalPrice(
    side: i32,
    saleKind: i32,
    basePrice: BigInt,
    extra: BigInt,
    listingTime: BigInt,
    expirationTime: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateFinalPrice",
      "calculateFinalPrice(uint8,uint8,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(side)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(saleKind)),
        ethereum.Value.fromUnsignedBigInt(basePrice),
        ethereum.Value.fromUnsignedBigInt(extra),
        ethereum.Value.fromUnsignedBigInt(listingTime),
        ethereum.Value.fromUnsignedBigInt(expirationTime)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hashToSign_(
    addrs: Array<Address>,
    uints: Array<BigInt>,
    side: i32,
    saleKind: i32,
    replacementPattern: Bytes,
    staticExtradata: Bytes,
    merkleRoot: Bytes
  ): Bytes {
    let result = super.call(
      "hashToSign_",
      "hashToSign_(address[10],uint256[9],uint8,uint8,bytes,bytes,bytes32):(bytes32)",
      [
        ethereum.Value.fromAddressArray(addrs),
        ethereum.Value.fromUnsignedBigIntArray(uints),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(side)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(saleKind)),
        ethereum.Value.fromBytes(replacementPattern),
        ethereum.Value.fromBytes(staticExtradata),
        ethereum.Value.fromFixedBytes(merkleRoot)
      ]
    );

    return result[0].toBytes();
  }

  try_hashToSign_(
    addrs: Array<Address>,
    uints: Array<BigInt>,
    side: i32,
    saleKind: i32,
    replacementPattern: Bytes,
    staticExtradata: Bytes,
    merkleRoot: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "hashToSign_",
      "hashToSign_(address[10],uint256[9],uint8,uint8,bytes,bytes,bytes32):(bytes32)",
      [
        ethereum.Value.fromAddressArray(addrs),
        ethereum.Value.fromUnsignedBigIntArray(uints),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(side)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(saleKind)),
        ethereum.Value.fromBytes(replacementPattern),
        ethereum.Value.fromBytes(staticExtradata),
        ethereum.Value.fromFixedBytes(merkleRoot)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  validateOrderParameters_(
    addrs: Array<Address>,
    uints: Array<BigInt>,
    side: i32,
    saleKind: i32,
    replacementPattern: Bytes,
    staticExtradata: Bytes,
    merkleRoot: Bytes
  ): boolean {
    let result = super.call(
      "validateOrderParameters_",
      "validateOrderParameters_(address[10],uint256[9],uint8,uint8,bytes,bytes,bytes32):(bool)",
      [
        ethereum.Value.fromAddressArray(addrs),
        ethereum.Value.fromUnsignedBigIntArray(uints),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(side)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(saleKind)),
        ethereum.Value.fromBytes(replacementPattern),
        ethereum.Value.fromBytes(staticExtradata),
        ethereum.Value.fromFixedBytes(merkleRoot)
      ]
    );

    return result[0].toBoolean();
  }

  try_validateOrderParameters_(
    addrs: Array<Address>,
    uints: Array<BigInt>,
    side: i32,
    saleKind: i32,
    replacementPattern: Bytes,
    staticExtradata: Bytes,
    merkleRoot: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "validateOrderParameters_",
      "validateOrderParameters_(address[10],uint256[9],uint8,uint8,bytes,bytes,bytes32):(bool)",
      [
        ethereum.Value.fromAddressArray(addrs),
        ethereum.Value.fromUnsignedBigIntArray(uints),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(side)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(saleKind)),
        ethereum.Value.fromBytes(replacementPattern),
        ethereum.Value.fromBytes(staticExtradata),
        ethereum.Value.fromFixedBytes(merkleRoot)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  validateOrder_(
    addrs: Array<Address>,
    uints: Array<BigInt>,
    side: i32,
    saleKind: i32,
    replacementPattern: Bytes,
    staticExtradata: Bytes,
    merkleRoot: Bytes
  ): boolean {
    let result = super.call(
      "validateOrder_",
      "validateOrder_(address[10],uint256[9],uint8,uint8,bytes,bytes,bytes32):(bool)",
      [
        ethereum.Value.fromAddressArray(addrs),
        ethereum.Value.fromUnsignedBigIntArray(uints),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(side)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(saleKind)),
        ethereum.Value.fromBytes(replacementPattern),
        ethereum.Value.fromBytes(staticExtradata),
        ethereum.Value.fromFixedBytes(merkleRoot)
      ]
    );

    return result[0].toBoolean();
  }

  try_validateOrder_(
    addrs: Array<Address>,
    uints: Array<BigInt>,
    side: i32,
    saleKind: i32,
    replacementPattern: Bytes,
    staticExtradata: Bytes,
    merkleRoot: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "validateOrder_",
      "validateOrder_(address[10],uint256[9],uint8,uint8,bytes,bytes,bytes32):(bool)",
      [
        ethereum.Value.fromAddressArray(addrs),
        ethereum.Value.fromUnsignedBigIntArray(uints),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(side)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(saleKind)),
        ethereum.Value.fromBytes(replacementPattern),
        ethereum.Value.fromBytes(staticExtradata),
        ethereum.Value.fromFixedBytes(merkleRoot)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  calculateCurrentPrice_(
    addrs: Array<Address>,
    uints: Array<BigInt>,
    side: i32,
    saleKind: i32,
    replacementPattern: Bytes,
    staticExtradata: Bytes,
    merkleRoot: Bytes
  ): BigInt {
    let result = super.call(
      "calculateCurrentPrice_",
      "calculateCurrentPrice_(address[10],uint256[9],uint8,uint8,bytes,bytes,bytes32):(uint256)",
      [
        ethereum.Value.fromAddressArray(addrs),
        ethereum.Value.fromUnsignedBigIntArray(uints),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(side)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(saleKind)),
        ethereum.Value.fromBytes(replacementPattern),
        ethereum.Value.fromBytes(staticExtradata),
        ethereum.Value.fromFixedBytes(merkleRoot)
      ]
    );

    return result[0].toBigInt();
  }

  try_calculateCurrentPrice_(
    addrs: Array<Address>,
    uints: Array<BigInt>,
    side: i32,
    saleKind: i32,
    replacementPattern: Bytes,
    staticExtradata: Bytes,
    merkleRoot: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateCurrentPrice_",
      "calculateCurrentPrice_(address[10],uint256[9],uint8,uint8,bytes,bytes,bytes32):(uint256)",
      [
        ethereum.Value.fromAddressArray(addrs),
        ethereum.Value.fromUnsignedBigIntArray(uints),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(side)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(saleKind)),
        ethereum.Value.fromBytes(replacementPattern),
        ethereum.Value.fromBytes(staticExtradata),
        ethereum.Value.fromFixedBytes(merkleRoot)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ordersCanMatch_(
    addrs: Array<Address>,
    uints: Array<BigInt>,
    sidesKinds: Array<i32>,
    calldataBuy: Bytes,
    calldataSell: Bytes,
    replacementPatternBuy: Bytes,
    replacementPatternSell: Bytes,
    staticExtradataBuy: Bytes,
    staticExtradataSell: Bytes
  ): boolean {
    let result = super.call(
      "ordersCanMatch_",
      "ordersCanMatch_(address[16],uint256[12],uint8[4],bytes,bytes,bytes,bytes,bytes,bytes):(bool)",
      [
        ethereum.Value.fromAddressArray(addrs),
        ethereum.Value.fromUnsignedBigIntArray(uints),
        ethereum.Value.fromI32Array(sidesKinds),
        ethereum.Value.fromBytes(calldataBuy),
        ethereum.Value.fromBytes(calldataSell),
        ethereum.Value.fromBytes(replacementPatternBuy),
        ethereum.Value.fromBytes(replacementPatternSell),
        ethereum.Value.fromBytes(staticExtradataBuy),
        ethereum.Value.fromBytes(staticExtradataSell)
      ]
    );

    return result[0].toBoolean();
  }

  try_ordersCanMatch_(
    addrs: Array<Address>,
    uints: Array<BigInt>,
    sidesKinds: Array<i32>,
    calldataBuy: Bytes,
    calldataSell: Bytes,
    replacementPatternBuy: Bytes,
    replacementPatternSell: Bytes,
    staticExtradataBuy: Bytes,
    staticExtradataSell: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "ordersCanMatch_",
      "ordersCanMatch_(address[16],uint256[12],uint8[4],bytes,bytes,bytes,bytes,bytes,bytes):(bool)",
      [
        ethereum.Value.fromAddressArray(addrs),
        ethereum.Value.fromUnsignedBigIntArray(uints),
        ethereum.Value.fromI32Array(sidesKinds),
        ethereum.Value.fromBytes(calldataBuy),
        ethereum.Value.fromBytes(calldataSell),
        ethereum.Value.fromBytes(replacementPatternBuy),
        ethereum.Value.fromBytes(replacementPatternSell),
        ethereum.Value.fromBytes(staticExtradataBuy),
        ethereum.Value.fromBytes(staticExtradataSell)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  orderCalldataCanMatch(
    buyCalldata: Bytes,
    buyReplacementPattern: Bytes,
    sellCalldata: Bytes,
    sellReplacementPattern: Bytes
  ): boolean {
    let result = super.call(
      "orderCalldataCanMatch",
      "orderCalldataCanMatch(bytes,bytes,bytes,bytes):(bool)",
      [
        ethereum.Value.fromBytes(buyCalldata),
        ethereum.Value.fromBytes(buyReplacementPattern),
        ethereum.Value.fromBytes(sellCalldata),
        ethereum.Value.fromBytes(sellReplacementPattern)
      ]
    );

    return result[0].toBoolean();
  }

  try_orderCalldataCanMatch(
    buyCalldata: Bytes,
    buyReplacementPattern: Bytes,
    sellCalldata: Bytes,
    sellReplacementPattern: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "orderCalldataCanMatch",
      "orderCalldataCanMatch(bytes,bytes,bytes,bytes):(bool)",
      [
        ethereum.Value.fromBytes(buyCalldata),
        ethereum.Value.fromBytes(buyReplacementPattern),
        ethereum.Value.fromBytes(sellCalldata),
        ethereum.Value.fromBytes(sellReplacementPattern)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  calculateMatchPrice_(
    addrs: Array<Address>,
    uints: Array<BigInt>,
    sidesKinds: Array<i32>,
    calldataBuy: Bytes,
    calldataSell: Bytes,
    replacementPatternBuy: Bytes,
    replacementPatternSell: Bytes,
    staticExtradataBuy: Bytes,
    staticExtradataSell: Bytes
  ): BigInt {
    let result = super.call(
      "calculateMatchPrice_",
      "calculateMatchPrice_(address[16],uint256[12],uint8[4],bytes,bytes,bytes,bytes,bytes,bytes):(uint256)",
      [
        ethereum.Value.fromAddressArray(addrs),
        ethereum.Value.fromUnsignedBigIntArray(uints),
        ethereum.Value.fromI32Array(sidesKinds),
        ethereum.Value.fromBytes(calldataBuy),
        ethereum.Value.fromBytes(calldataSell),
        ethereum.Value.fromBytes(replacementPatternBuy),
        ethereum.Value.fromBytes(replacementPatternSell),
        ethereum.Value.fromBytes(staticExtradataBuy),
        ethereum.Value.fromBytes(staticExtradataSell)
      ]
    );

    return result[0].toBigInt();
  }

  try_calculateMatchPrice_(
    addrs: Array<Address>,
    uints: Array<BigInt>,
    sidesKinds: Array<i32>,
    calldataBuy: Bytes,
    calldataSell: Bytes,
    replacementPatternBuy: Bytes,
    replacementPatternSell: Bytes,
    staticExtradataBuy: Bytes,
    staticExtradataSell: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateMatchPrice_",
      "calculateMatchPrice_(address[16],uint256[12],uint8[4],bytes,bytes,bytes,bytes,bytes,bytes):(uint256)",
      [
        ethereum.Value.fromAddressArray(addrs),
        ethereum.Value.fromUnsignedBigIntArray(uints),
        ethereum.Value.fromI32Array(sidesKinds),
        ethereum.Value.fromBytes(calldataBuy),
        ethereum.Value.fromBytes(calldataSell),
        ethereum.Value.fromBytes(replacementPatternBuy),
        ethereum.Value.fromBytes(replacementPatternSell),
        ethereum.Value.fromBytes(staticExtradataBuy),
        ethereum.Value.fromBytes(staticExtradataSell)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ChangeTakerRelayerFeeShareCall extends ethereum.Call {
  get inputs(): ChangeTakerRelayerFeeShareCall__Inputs {
    return new ChangeTakerRelayerFeeShareCall__Inputs(this);
  }

  get outputs(): ChangeTakerRelayerFeeShareCall__Outputs {
    return new ChangeTakerRelayerFeeShareCall__Outputs(this);
  }
}

export class ChangeTakerRelayerFeeShareCall__Inputs {
  _call: ChangeTakerRelayerFeeShareCall;

  constructor(call: ChangeTakerRelayerFeeShareCall) {
    this._call = call;
  }

  get newTakerRelayerFeeShare(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newMakerRelayerFeeShare(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get newProtocolFeeShare(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ChangeTakerRelayerFeeShareCall__Outputs {
  _call: ChangeTakerRelayerFeeShareCall;

  constructor(call: ChangeTakerRelayerFeeShareCall) {
    this._call = call;
  }
}

export class ChangeProtocolFeeRecipientCall extends ethereum.Call {
  get inputs(): ChangeProtocolFeeRecipientCall__Inputs {
    return new ChangeProtocolFeeRecipientCall__Inputs(this);
  }

  get outputs(): ChangeProtocolFeeRecipientCall__Outputs {
    return new ChangeProtocolFeeRecipientCall__Outputs(this);
  }
}

export class ChangeProtocolFeeRecipientCall__Inputs {
  _call: ChangeProtocolFeeRecipientCall;

  constructor(call: ChangeProtocolFeeRecipientCall) {
    this._call = call;
  }

  get newProtocolFeeRecipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeProtocolFeeRecipientCall__Outputs {
  _call: ChangeProtocolFeeRecipientCall;

  constructor(call: ChangeProtocolFeeRecipientCall) {
    this._call = call;
  }
}

export class IncrementNonceCall extends ethereum.Call {
  get inputs(): IncrementNonceCall__Inputs {
    return new IncrementNonceCall__Inputs(this);
  }

  get outputs(): IncrementNonceCall__Outputs {
    return new IncrementNonceCall__Outputs(this);
  }
}

export class IncrementNonceCall__Inputs {
  _call: IncrementNonceCall;

  constructor(call: IncrementNonceCall) {
    this._call = call;
  }
}

export class IncrementNonceCall__Outputs {
  _call: IncrementNonceCall;

  constructor(call: IncrementNonceCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class ChangeExchangeFeeRateCall extends ethereum.Call {
  get inputs(): ChangeExchangeFeeRateCall__Inputs {
    return new ChangeExchangeFeeRateCall__Inputs(this);
  }

  get outputs(): ChangeExchangeFeeRateCall__Outputs {
    return new ChangeExchangeFeeRateCall__Outputs(this);
  }
}

export class ChangeExchangeFeeRateCall__Inputs {
  _call: ChangeExchangeFeeRateCall;

  constructor(call: ChangeExchangeFeeRateCall) {
    this._call = call;
  }

  get newExchangeFeeRate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeExchangeFeeRateCall__Outputs {
  _call: ChangeExchangeFeeRateCall;

  constructor(call: ChangeExchangeFeeRateCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _merkleValidator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _royaltyRegisterHub(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveOrder_Call extends ethereum.Call {
  get inputs(): ApproveOrder_Call__Inputs {
    return new ApproveOrder_Call__Inputs(this);
  }

  get outputs(): ApproveOrder_Call__Outputs {
    return new ApproveOrder_Call__Outputs(this);
  }
}

export class ApproveOrder_Call__Inputs {
  _call: ApproveOrder_Call;

  constructor(call: ApproveOrder_Call) {
    this._call = call;
  }

  get addrs(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get uints(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get side(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get saleKind(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get replacementPattern(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get staticExtradata(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get orderbookInclusionDesired(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }

  get merkleData(): Array<Bytes> {
    return this._call.inputValues[7].value.toBytesArray();
  }
}

export class ApproveOrder_Call__Outputs {
  _call: ApproveOrder_Call;

  constructor(call: ApproveOrder_Call) {
    this._call = call;
  }
}

export class CancelOrder_Call extends ethereum.Call {
  get inputs(): CancelOrder_Call__Inputs {
    return new CancelOrder_Call__Inputs(this);
  }

  get outputs(): CancelOrder_Call__Outputs {
    return new CancelOrder_Call__Outputs(this);
  }
}

export class CancelOrder_Call__Inputs {
  _call: CancelOrder_Call;

  constructor(call: CancelOrder_Call) {
    this._call = call;
  }

  get addrs(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get uints(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get side(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get saleKind(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get replacementPattern(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get staticExtradata(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get merkleRoot(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class CancelOrder_Call__Outputs {
  _call: CancelOrder_Call;

  constructor(call: CancelOrder_Call) {
    this._call = call;
  }
}

export class AtomicMatch_Call extends ethereum.Call {
  get inputs(): AtomicMatch_Call__Inputs {
    return new AtomicMatch_Call__Inputs(this);
  }

  get outputs(): AtomicMatch_Call__Outputs {
    return new AtomicMatch_Call__Outputs(this);
  }
}

export class AtomicMatch_Call__Inputs {
  _call: AtomicMatch_Call;

  constructor(call: AtomicMatch_Call) {
    this._call = call;
  }

  get addrs(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get uints(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get sidesKinds(): Array<i32> {
    return this._call.inputValues[2].value.toI32Array();
  }

  get calldataBuy(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get calldataSell(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get replacementPatternBuy(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get replacementPatternSell(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }

  get staticExtradataBuy(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }

  get staticExtradataSell(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }

  get rssMetadata(): Bytes {
    return this._call.inputValues[9].value.toBytes();
  }
}

export class AtomicMatch_Call__Outputs {
  _call: AtomicMatch_Call;

  constructor(call: AtomicMatch_Call) {
    this._call = call;
  }
}
